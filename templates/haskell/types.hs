{-# LANGUAGE OverloadedStrings #-}
--
-- THIS MODULE IS AUTOGENERATED BY BABELFISH. DO NOT MODIFY
--

module Babelfish.$name.pascal$ where

import Data.Aeson ((.:),(.=))
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import qualified Data.Text as Text

$for(type)$
data $type.name.pascal$ = 
$for(type.constructor)$
  $type.constructor.name.pascal$$if(type.constructor.empty)$$else$ {
$for(type.constructor.parameter)$
    $type.constructor.parameter.name.camel$ :: $type.constructor.parameter.type$$sep$,
$endfor$

  }$endif$$sep$ |
$endfor$


$endfor$
-- CODEC

$for(type)$
$if(type.plain)$
$for(type.constructor)$
instance Aeson.FromJSON $type.name.pascal$ where
  parseJSON = Aeson.withObject "$type.name.raw$" $$ \o -> $type.name.pascal$
    <$$> $for(type.constructor.parameter)$o .: "$type.constructor.parameter.name.raw$"$sep$
    <*> $endfor$

instance Aeson.ToJSON $type.name.pascal$ where
  toJSON ($type.name.pascal$ $for(type.constructor.parameter)$$type.constructor.parameter.name.camel$$sep$ $endfor$) = Aeson.object [
      $for(type.constructor.parameter)$"$type.constructor.parameter.name.raw$" .= $type.constructor.parameter.name.camel$$sep$,
      $endfor$]
$endfor$
$else$
instance Aeson.FromJSON $type.name.pascal$ where
$for(type.constructor)$
$if(type.constructor.empty)$
  parseJSON (Aeson.String "$type.constructor.name.raw$") = return $type.constructor.name.pascal$      
$endif$
$endfor$
$if(type.enum)$
$else$
  parseJSON (Aeson.Object o) = do
    tpe <- o .: "type"
    case tpe of
$for(type.constructor)$
$if(type.constructor.empty)$
$else$
      "$type.constructor.name.raw$" -> $type.constructor.name.pascal$
        <$$> $for(type.constructor.parameter)$o .: "$type.constructor.parameter.name.raw$"$sep$
        <*> $endfor$         
$endif$
$endfor$
      invalid -> fail $$ "invalid $type.name.raw$ type: " ++ invalid
$endif$
  parseJSON invalid = Aeson.typeMismatch "$type.name.raw$" invalid

instance Aeson.ToJSON $type.name.pascal$ where
$for(type.constructor)$
$if(type.constructor.empty)$
  toJSON $type.constructor.name.pascal$ = Aeson.String "$type.constructor.name.raw$"
$else$
  toJSON ($type.constructor.name.pascal$ $for(type.constructor.parameter)$$type.constructor.parameter.name.camel$$sep$ $endfor$) = Aeson.object [
    "type" .= ("$type.constructor.name.raw$" :: Text.Text),
    $for(type.constructor.parameter)$"$type.constructor.parameter.name.raw$" .= $type.constructor.parameter.name.camel$$sep$,
    $endfor$]
$endif$
$endfor$
$endif$
$sep$

$endfor$